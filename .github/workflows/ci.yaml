name: CI/CD Pipeline

on:
  pull_request:
    paths:
      - go.mod
      - '**.go'
      - .github/workflows/ci.yml
      - 'website/**'
      - 'build/**' 

jobs:
  environment-setup:
    name: Environment Setup and Dependency Installation
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: make environment
      - run: make go-mod-sync
      - uses: actions/upload-artifact@v4
        with:
          name: vendor_artifacts
          path: vendor/
          retention-days: 1

  code-quality:
    name: Code Quality Checks and Static Code Analysis
    runs-on: ubuntu-latest
    needs: environment-setup  # Runs after environment setup completes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Code Quality Checks and Static Code Analysis
        run: make go-lint

  unit-tests:
    name: Unit Testing
    runs-on: ubuntu-latest
    needs: environment-setup  # Runs after environment setup completes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # - name: Unit Testing
      #   env:
      #     GOCACHE: ${{ runner.temp }}/go-build-cache      
      #   run: make go-test

  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: environment-setup  # Runs after environment setup completes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # - name: Security Scanning with Trivy
      #   run: make trivy-scan TRIVY_ARGS="fs ."

  package:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, security-scanning]  # Runs only after all these jobs succeed
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          submodules: recursive

      - uses: actions/download-artifact@v4
        with:
          path: vendor
          merge-multiple: true

      - name: Docker Lint
        run: make local-docker-lint-all

      - name: Docker Build 
        run: make local-docker-build-all

      - name: Authenticate to GCP
        id: auth
        uses: 'google-github-actions/auth@v2.1.6'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.PROVIDER_NAME }}
          service_account: ${{ secrets.SA_EMAIL }}

      - name: Login to GCR
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ secrets.GCR_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Push Docker Image to GCR
        run: make local-docker-push-all
